function solution(orders, course) {
    let answer = [];
    
    for(let i = 0; i < course.length; i++){
        const size = course[i];
        const map = new Map();
        
        for(let j = 0; j < orders.length; j++){
            const order = orders[j];
            combination(size, map, order, 0, "", 0);
        }
        getMaxSet(map, answer);
    }
    
    answer = answer.sort();
    return answer;
}

function getMaxSet(map, answer){
    let max = 0;
    
    for(let value of map.values()){
        if(max < value){
            max = value;
        }
    }
    
    for(let [key, value] of map){
        if(max === value && max !== 1){
            answer.push(key);
        }
    }
}

function combination(n, map, order, r, str, start) {
    if(r === n){
        let charArray = str.split("");
        charArray = charArray.sort();
        const key = charArray.join("");
        
        if(map.has(key)) {
            const value = Number(map.get(key));
            map.set(key, value + 1);
        }else{
            map.set(key, 1);
        }
        return;
    }
    
    for(let i = start; i < order.length; i++){
        const ch = order.charAt(i);
        combination(n, map, order, r+1, str + ch, i + 1);
    }
}
