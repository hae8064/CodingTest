const fs = require('fs');
const filePath = process.platform === 'linux' ? '/dev/stdin' : './9663.txt';
let inp = fs
  .readFileSync(filePath)
  .toString()
  .replace(/\r/g, '')
  .trim()
  .split('\n');

const N = +inp[0];
let chess = Array.from(Array(N), () => new Array(N).fill(0));
let result = 0;
let isValidCoord = (y, x) => y >= 0 && y < N && x >= 0 && x < N;

const dfs = (k) => {
  if (k === N) {
    result++;
    return;
  }

  for (let i = 0; i < N; i++) {
    if (chess[k][i] === 0) {
      //체스판 비활성화
      for (let y = k + 1, x = i - 1; isValidCoord(y, x); y++, x--) {
        chess[y][x]++;
      }
      // 오른쪽 대각선
      for (let y = k + 1, x = i + 1; isValidCoord(y, x); y++, x++) {
        chess[y][x]++;
      }
      // 아래 직선
      for (let y = k + 1, x = i; isValidCoord(y, x); y++) {
        chess[y][x]++;
      }

      dfs(k + 1);

      //체스판 활성화
      for (let y = k + 1, x = i - 1; isValidCoord(y, x); y++, x--) {
        chess[y][x]--;
      }
      // 오른쪽 대각선
      for (let y = k + 1, x = i + 1; isValidCoord(y, x); y++, x++) {
        chess[y][x]--;
      }
      // 아래 직선
      for (let y = k + 1, x = i; isValidCoord(y, x); y++) {
        chess[y][x]--;
      }
    }
  }
};

dfs(0);

console.log(result);
