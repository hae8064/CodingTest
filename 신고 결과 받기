//report 배열 돌려서, 인덱스별 띄어쓰기 별 단어 중 첫번째 단어는 신고한 사람
//두번째 단어는 신고받은 사람이므로 이 단어를 증가시킨다. 이 때,
//k개이상인 두번째 단어를 신고한 유저를 ++
//k개 이상 신고 된 id_list 유저를 신고한 id 한명당 메일 1개씩 증가 (result에 +1 씩)
//(단 중복 신고는 안됨)

function solution(id_list, report, k) {
    var answer = [];
    const firId = [];               //신고한 사람
    const lastId = [];              //신고 당한 사람
    let countNum = [];
    let choiceId = [];              //k개 이상 신고 받은사람
    const set = new Set(report);
    const report2 = [...set];           //한사람이 같은 사람 중복 신고 제거 report2배열
    let lastChoiceId = [];          //최종 선정된 아이디를 신고한 사람들
    
    for(let i = 0; i < report2.length; i++){
        let arr = report2[i].split(" ");
                firId.push(arr[0]);
                lastId.push(arr[1]);
        }
    
    for(let i = 0; i < id_list.length; i++){
        countNum[i] = lastId.filter(element => id_list[i] === element).length;
        
        //k개 이상 신고 받은 사람
        if(countNum[i] >= k){
            choiceId.push(id_list[i]);
        }
     
    }
    if(choiceId.length === 0){
        for(let i =0; i < id_list.length; i++){
             answer.push(0);
        }
    }   
    else{
        for(let i = 0; i < report2.length; i++){
        for(let j = 0; j < choiceId.length; j++){
            if(lastId[i] === choiceId[j]){
                lastChoiceId.push(firId[i]);
            }
        }
    }
    
    for(let i = 0; i < id_list.length; i++){
        answer.push(lastChoiceId.filter(element => id_list[i] === element).length);
        }
    }
    return answer;
}
