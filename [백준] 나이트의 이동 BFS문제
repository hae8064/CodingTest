const fs = require('fs');
const filePath = process.platform === 'linux' ? '/dev/stdin' : './7562.txt';
let inp = fs
  .readFileSync(filePath)
  .toString()
  .replace(/\r/g, '')
  .trim()
  .split('\n');

let count = Number(inp[0]);
let index = 1;

for (let i = 0; i < count; i++) {
  let board_size = Number(inp[index]);
  let board = new Array(board_size);

  for (let j = 0; j < board.length; j++) {
    board[j] = new Array(board_size).fill(0);
  }
  let start_x = Number(inp[index + 1].split(' ')[0]);
  let start_y = Number(inp[index + 1].split(' ')[1]);
  let end_x = Number(inp[index + 2].split(' ')[0]);
  let end_y = Number(inp[index + 2].split(' ')[1]);
  board[start_x][start_y] = 1;

  function bfs() {
    let L = 0;
    const dx = [-1, -2, -2, -1, 1, 2, 2, 1];
    const dy = [2, 1, -1, -2, -2, -1, 1, 2];
    let queue = [];

    queue.push([start_x, start_y]);

    while (queue.length) {
      let len = queue.length;
      for (let i = 0; i < len; i++) {
        let v = queue.shift();
        if (v[0] === end_x && v[1] === end_y) {
          return L;
        }
        for (let i = 0; i < 8; i++) {
          let nx = v[0] + dx[i];
          let ny = v[1] + dy[i];
          if (
            nx >= 0 &&
            nx < board_size &&
            ny >= 0 &&
            ny < board_size &&
            board[nx][ny] === 0
          ) {
            board[nx][ny] = 1;
            queue.push([nx, ny]);
          }
        }
      }
      L++;
    }
  }
  console.log(bfs());
  index += 3;
}
